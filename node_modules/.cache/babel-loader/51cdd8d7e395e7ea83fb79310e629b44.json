{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETHING = 'TOGGLE_IS_FETHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 100,\n  totalUserCount: 0,\n  currentPage: 3,\n  isFetching: true,\n  followingInProgress: [2, 1]\n};\n\nconst UsersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: true\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case UNFOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: false\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUserCount: action.totalUsersCount\n        };\n      }\n\n    case TOGGLE_IS_FETHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USERS_COUNT,\n  totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setTotalUsersCount(data.totalCount));\n    });\n  };\n};\nexport const follow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.follow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(followSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport const unfollow = userId => {\n  return dispatch => {\n    dispatch(toggleFollowingProgress(true, userId));\n    usersAPI.unfollow(userId).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(unfollowSuccess(userId));\n      }\n\n      dispatch(toggleFollowingProgress(false, userId));\n    });\n  };\n};\nexport default UsersReducer;","map":{"version":3,"sources":["/home/esen/my-app/src/redux/users-reducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUserCount","currentPage","isFetching","followingInProgress","UsersReducer","state","action","type","map","u","id","userId","followed","totalUsersCount","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","then","data","items","totalCount","follow","response","resultCode","unfollow"],"mappings":"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","sourcesContent":["import { usersAPI } from \"../api/api\";\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETHING = 'TOGGLE_IS_FETHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\nlet initialState = {\n    users:[],\n    pageSize: 100,\n    totalUserCount: 0,\n    currentPage: 3,\n    isFetching: true,\n    followingInProgress: [2, 1]\n};\nconst UsersReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FOLLOW: {\n\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: true }\n                    }\n                    return u;\n                })\n            }\n        }\n        case UNFOLLOW: {\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return { ...u, followed: false }\n                    }\n                    return u;\n                })\n            }\n\n        }\n        case SET_USERS: {\n            return { ...state, users: action.users }\n        }\n        case SET_CURRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUserCount: action.totalUsersCount }\n        }\n        case TOGGLE_IS_FETHING: {\n            return { ...state, isFetching: action.isFetching }\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state;\n    }\n\n}\n\nexport const followSuccess = (userId) => ({ type: FOLLOW, userId })\nexport const unfollowSuccess = (userId) => ({ type: UNFOLLOW, userId })\nexport const setUsers = (users) => ({ type: SET_USERS, users })\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage })\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USERS_COUNT, totalUsersCount })\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETHING, isFetching })\nexport const toggleFollowingProgress = (isFetching, userId) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId })\n\nexport const getUsers = (currentPage, pageSize) => {\n\n    return (dispatch) => {\n        dispatch(toggleIsFetching(true));\n\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setTotalUsersCount(data.totalCount));\n\n        });\n    }\n\n}\n\n\nexport const follow = (userId) => {\n\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.follow(userId)\n            .then(response => {\n                \n                if (response.data.resultCode === 0) {\n                    dispatch(followSuccess(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n    }\n}\n\nexport const unfollow = (userId) => {\n\n    return (dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId));\n        usersAPI.unfollow(userId)\n            .then(response => {\n                if (response.data.resultCode === 0) {\n                    dispatch(unfollowSuccess(userId))\n                }\n                dispatch(toggleFollowingProgress(false, userId));\n            });\n\n    }\n\n}\nexport default UsersReducer;"]},"metadata":{},"sourceType":"module"}