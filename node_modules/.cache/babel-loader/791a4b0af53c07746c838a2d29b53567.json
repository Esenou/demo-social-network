{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      userId,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(userId, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/esen/my-app/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AAAoB;AAEhB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE;AAFP,SAAP;AAIH;;AAED;AACI,aAAOH,KAAP;AAVR;AAaH,CAdD;;AAgBA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EAAE;AAAER,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAAhC,CAAnC,CAAxB;AAEP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAErD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB;;AAEA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,QAAI;AAAEf,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA;AAAjB,QAA2BU,QAAQ,CAACE,IAAT,CAAcA,IAA7C;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuB,IAAvB,CAAhB,CAAR;AACH;AAGJ,CAVM;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiC,MAAON,QAAP,IAAoB;AACtE,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,CAArB;;AACA,MAAIL,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAFD,MAEO;AAEH,QAAIQ,OAAO,GAAGN,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACE,IAAT,CAAcK,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAR,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAEwB,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAX,CAAR;AACH;AAGJ,CAXM;AAYP,OAAO,MAAMI,MAAM,GAAG,MAAM,MAAOX,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAAC0B,MAAR,EAArB;;AACA,MAAIV,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AAGJ,CAPM;AASP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA: {\n\n            return {\n                ...state,\n                ...action.payload\n            }\n        }\n\n        default:\n            return state;\n    }\n\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { userId, email, login, isAuth }, })\n\nexport const getAuthUserData = () => async (dispatch) => {\n\n    let response = await authAPI.me();\n\n    if (response.data.resultCode === 0) {\n        let { userId, email, login } = response.data.data;\n        dispatch(setAuthUserData(userId, email, login, true));\n    }\n\n\n}\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe)\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n    } else {\n\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", { _error: message }));\n    }\n\n\n}\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n\n\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}