{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => {\n  return dispatch => {\n    authAPI.me().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          userId,\n          email,\n          login\n        } = response.data.data;\n        dispatch(setAuthUserData(userId, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData());\n      }\n    });\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["/home/esen/my-app/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","logout"],"mappings":"AAAA,SAAUA,OAAV,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AAAoB;AAEhB,eAAO,EACH,GAAGO,KADA;AAEH,aAAGC,MAAM,CAACE;AAFP,SAAP;AAIC;;AAEL;AACI,aAAOH,KAAP;AAVR;AAaH,CAdD;;AAgBA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAAuBU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAsBC,IAAAA;AAAtB;AAAhC,CAAnC,CAAxB;AAEP,OAAO,MAAMO,eAAe,GAAG,MAAK;AAChC,SAAQC,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAACe,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,YAAI;AAAEhB,UAAAA,MAAF;AAAUC,UAAAA,KAAV;AAAiBC,UAAAA;AAAjB,YAA2BY,QAAQ,CAACC,IAAT,CAAcA,IAA7C;AACAJ,QAAAA,QAAQ,CAACF,eAAe,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAsB,IAAtB,CAAhB,CAAR;AACD;AACF,KALH;AAMH,GAPD;AAQH,CATM;AAUP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAgC;AACjD,SAAQP,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAgDC,QAAQ,IAAI;AACxD,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAElCL,QAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACD;AACF,KALH;AAMH,GAPD;AAQH,CATM;AAUP,OAAO,MAAMS,MAAM,GAAG,MAAK;AACvB,SAAQR,QAAD,IAAc;AACjBd,IAAAA,OAAO,CAACsB,MAAR,GAAiBN,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,QAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAkB,KAAlB,CAAhB,CAAR;AACH;AACF,KAJH;AAKH,GAND;AAOH,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import {  authAPI } from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA: {\n\n            return {\n                ...state,\n                ...action.payload,\n                }\n            }\n       \n        default:\n            return state;\n    }\n\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, payload: {userId, email, login,isAuth},})\n\nexport const getAuthUserData = () =>{\n    return (dispatch) => {\n        authAPI.me().then(response => {\n            if (response.data.resultCode === 0) {\n              let { userId, email, login } = response.data.data;\n              dispatch(setAuthUserData(userId, email, login,true));\n            }\n          });\n    }\n}\nexport const login = (email, password, rememberMe) =>{\n    return (dispatch) => {\n        authAPI.login(email, password, rememberMe).then(response => {\n            if (response.data.resultCode === 0) {\n              \n              dispatch(getAuthUserData());\n            }\n          });\n    }\n}\nexport const logout = () =>{\n    return (dispatch) => {\n        authAPI.logout().then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setAuthUserData(null, null, null,false));\n            }\n          });\n    }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}