{"ast":null,"code":"var _jsxFileName = \"/home/esen/my-app/src/components/Users/UsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../redux/users-reducer';\nimport Users from './Users';\nimport * as axios from 'axios';\nimport preloader from '../../asserts/images/preloader.gif';\nimport Preloader from '../common/Preloader/Preloader';\n\nclass UsersContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onPageChanged = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers(this.props).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n      console.log(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 38\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUserCount: this.props.totalUserCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      users: this.props.users,\n      onPageChanged: this.onPageChanged,\n      unfollow: this.props.unfollow,\n      follow: this.props.follow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUserCount: state.usersPage.totalUserCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispathToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage: (currentPage) => {\n//             dispatch(setCurrentPageAC(currentPage));\n//         },\n//         setTotalUsersCount: (totalUsersCount) => {\n//             dispatch(setTotalUsersCountAC(totalUsersCount));\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(setIsFetchingAC(isFetching));\n//         }\n//     }\n// }\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/home/esen/my-app/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","Users","axios","preloader","Preloader","UsersContainer","Component","constructor","props","onPageChanged","pageNumber","get","pageSize","withCredentials","then","response","data","items","componentDidMount","getUsers","totalCount","console","log","render","isFetching","totalUserCount","currentPage","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../../redux/users-reducer';\nimport Users from './Users';\nimport *as axios from 'axios';\nimport preloader from '../../asserts/images/preloader.gif';\nimport Preloader from '../common/Preloader/Preloader';\n\nclass UsersContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        this.props.toggleIsFetching(true);\n        getUsers(this.props).then(response => {\n            this.props.toggleIsFetching(false);\n            this.props.setUsers(response.data.items);\n            this.props.setTotalUsersCount(response.data.totalCount);\n            console.log(response.data.totalCount);\n        });\n    }\n    onPageChanged = (pageNumber) => {\n        this.props.toggleIsFetching(true);\n        this.props.setCurrentPage(pageNumber)\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,{\n            withCredentials: true\n        }).then(response => {\n            this.props.toggleIsFetching(false);\n            this.props.setUsers(response.data.items);\n\n        });\n    }\n\n    render() {\n\n\n        return <>\n            {this.props.isFetching ? <Preloader/> : null}\n            <Users totalUserCount={this.props.totalUserCount}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                users={this.props.users}\n                onPageChanged={this.onPageChanged}\n\n                unfollow={this.props.unfollow}\n                follow={this.props.follow}\n\n            />\n        </>\n\n    }\n\n}\n\n\n\nlet mapStateToProps = (state) => {\n\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUserCount: state.usersPage.totalUserCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\n// let mapDispathToProps = (dispatch) => {\n\n//     return {\n//         follow: (userId) => {\n\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users) => {\n//             dispatch(setUsersAC(users));\n//         },\n\n//         setCurrentPage: (currentPage) => {\n//             dispatch(setCurrentPageAC(currentPage));\n//         },\n//         setTotalUsersCount: (totalUsersCount) => {\n//             dispatch(setTotalUsersCountAC(totalUsersCount));\n//         },\n//         toggleIsFetching: (isFetching) => {\n//             dispatch(setIsFetchingAC(isFetching));\n//         }\n//     }\n\n// }\n\nexport default connect(mapStateToProps, {follow,unfollow,setUsers,setCurrentPage,setTotalUsersCount,toggleIsFetching})(UsersContainer);"]},"metadata":{},"sourceType":"module"}